{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Prio Distributor API V3.2 (General Availability)",
    "description" : "# Interface Specification \n![Uptime](https://badgen.net/uptime-robot/status/m785487968-fe65ff8817eb8d24c10c8d99) ![Uptime Robot ratio (30 days)](https://img.shields.io/uptimerobot/ratio/m785487968-fe65ff8817eb8d24c10c8d99) <!--- ![pipeline status](https://gitlab.fullserviceplatform.com/apis/distributor-api/badges/master/pipeline.svg) --> ![Maintenance](https://img.shields.io/badge/Maintained-yes-green.svg) ![Security Headers](https://img.shields.io/security-headers?url=https%3A%2F%2Fdistributor-api.prioticket.com%2Fv3.2%2Fdistributor%2Fsystem%2Fping)\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/2f2d6fd6445d67442542#?env%5BSandbox%20API%20V3.2%5D=W3sia2V5IjoiZGlzdHJpYnV0b3JJRCIsInZhbHVlIjoiNTAxIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJVc2VybmFtZSIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJQYXNzd29yZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJQcm9kdWN0SUQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiZW52aXJvbm1lbnQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoicHJvZHVjdF90eXBlX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6InByb2R1Y3RfYXZhaWxhYmlsaXR5X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6InJlc2VydmF0aW9uX3JlZmVyZW5jZSIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJvcmRlcl9yZWZlcmVuY2UiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9XQ==)\n## Note\nThis product is in **General Availability**.\n\n  GA products and features are available to all customers, ready for production use, and covered by our SLAs. GA products and features are commonly available throughout the whole system and are fully implemented.\n\n## Description\nThis document describes the Prio Distributor API, powered by a platform through which products can be distributed for services and venues. This API allows to obtain information about our inventory, check real-time availability and make bookings. Every booking will result in valid tickets with which users have access to the services and venues. Access is allowed when a valid passcode gets scanned and redeemed by the supplier.\n\nThe Prio Distributor API can be divided into four parts:\n* Content APIs: Exposes our product inventory such as Destinations, Categories and Products.\n* Product Availability API: Most products have have limited capacity or require you to select a certain time. The availability API returns those slots.\n* Reservation API: The reservation API allows you to block/reserve a ticket for a limited time so that you are able to obtain the payment from the guest. Furthermore it allows for managing a shoppingcart if needed.\n* Booking APIs: The booking API allows to confirm reservations, make direct bookings and retrieve your tickets / barcodes.\n\n---\n\n## Getting Started\n### Integration Process\nTo facilitate our partners in the best possible way we recommend to follow the process as described below:\n\n<b>Pre-development stage</b>\n1. Review our documentation.\n2. Fill in our \"Prio Partner Integration Questionnaire\" and finalize the scope of the integration.\n---\n<b>Development stage</b>\n3. Partner starts implementing the API according to agreed scope.\n---\n<b>End-to-end testing stage</b>\n4. Partner notifies the API Verification Team (<api-verification@prioticket.com>) who will initiate the end-to-end verification process with the partner.\n---\n<b>Mapping stage</b>\n5. Prio and Partner create mutual product mapping sheet. (Optional)\n---\n<b>Launch and monitoring stage</b>\n \n6. Prio provides production credentials.\n7. One or more test orders are made on production to reassure third-party connectivity. \n8. Partner is monitored and added to the Marketplace.\n---\n### Partner Integration Questionnaire\nThe \"Prio Partner Integration Questionnaire\" will be used to guide your implementation to the Prio system. It contains basic information on your company, integration use-cases, scoping, process explanations and more.\n### Scope\nAs mentioned earlier we highly recommended scoping your requirements list with your integration manager. This API offers an extensive list of possibilities and exceptions. Depending on your product setup, you are not required to implement each and every feature. Partial implementation of this API is possible due to a limited number of mandatory fields as well as multiple alternative request / response formats.\n\nFor example, a valid order can be made in our system with less than 8 values and a single endpoint:\n \n ```\n {\n    \"order\": {\n        \"order_distributor_id\": \"{{order_distributor_id}}\",\n        \"order_language\": \"{{order_language}}\",\n        \"order_external_reference\": \"{{order_external_reference}}\",\n        \"order_bookings\": [\n            {\n                \"booking_option_type\": \"DIRECT_BOOKING\",\n                \"product_id\": \"{product_id}\",\n                \"product_type_details\": [\n                    {\n                        \"product_type_id\": \"{{product_type_id}}\",\n                        \"product_type_count\": \"{{product_type_count}}\"\n                    }\n                ]\n            }\n        ],\n        \"order_contact\": {\n            \"contact_email\": \"{{contact_email}}\"\n        }\n    }\n}\n```\n\n <table>\n  <tr>\n    <th>Basic Functionalities</th>\n    <th>Advanced Functionalities</th>\n  </tr>\n  <tr>\n    <td>Basic Product Types</td>\n    <td>Advanced Product Types</td>\n  </tr>\n  <tr>\n    <td>Admission Types</td>\n    <td>Multi Currency</td>\n  </tr>\n  <tr>\n    <td>Third Party Tickets</td>\n    <td>Quantity Pricing</td>\n  </tr>\n  <tr>\n    <td>Availability</td>\n    <td>Daily Pricing</td>\n  </tr>\n  <tr>\n    <td>Capacity</td>\n    <td>Age Group Pricing</td>\n  </tr>\n  <tr>\n    <td>Currency</td>\n    <td>Partner Sales</td>\n  </tr>\n  <tr>\n    <td>Seasonal Pricing</td>\n    <td>Advanced Product Options</td>\n  </tr>\n  <tr>\n    <td>Basic Product Options</td>\n    <td>Pickup Points</td>\n  </tr>\n  <tr>\n    <td>Product Includes (Content)</td>\n    <td>Combi Products</td>\n  </tr>\n  <tr>\n    <td>Product Excludes (Content)</td>\n    <td>Cluster Products</td>\n  </tr>\n  <tr>\n    <td>Duration</td>\n    <td>Addon Products</td>\n  </tr>\n  <tr>\n    <td>Opening Times (Content)</td>\n    <td>Promocodes</td>\n  </tr>\n  <tr>\n    <td>Locations (Content)</td>\n    <td>Custom Fields</td>\n  </tr>\n  <tr>\n    <td>Categories (Content)</td>\n    <td>Tags (Content)</td>\n  </tr>\n  <tr>\n    <td>Highlights (Content)</td>\n    <td>Cancellation Policy (Restriction)</td>\n  </tr>\n  <tr>\n    <td>Cancellation Policy (Content)</td>\n    <td>Multi language (Content)</td>\n  </tr>\n  <tr>\n    <td>Turnout Time (Content)</td>\n    <td>Routes (Content)</td>\n  </tr>\n  <tr>\n    <td>Booking Quantity Limit</td>\n    <td>Group code (Code Setttings)</td>\n  </tr>\n  <tr>\n    <td>Travel Date Required</td>\n    <td>Product Type Quantity Limit</td>\n  </tr>\n  <tr>\n    <td>Dynamic reservation timeout</td>\n    <td>Group Pricing</td>\n  </tr>\n  <tr>\n    <td>Discounts</td>\n    <td>Seating</td>\n  </tr>\n  <tr>\n    <td>Price Result check (Own products)</td>\n    <td>Partial Cancellation and Partial Refunds</td>\n  </tr>\n  <tr>\n    <td>Create / Update / Cancel Reservations</td>\n    <td>Advanced Contact Details</td>\n  </tr>\n  <tr>\n    <td>Create / Update / Cancel Orders</td>\n    <td>Order Guests</td>\n  </tr>\n  <tr>\n    <td>Basic Contact Details</td>\n    <td>Order Options</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>Advanced code settings</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>Advanced filtering</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>Prio PSP support</td>\n  </tr>\n</table>\n  \n---  \n  \n### Postman \n[Postman](https://www.getpostman.com/) is a very popular tool for API development. Luckily Postman now has support for OpenAPI, which means you can import this whole API as a collection in a few steps.\nFor more information check: [Working with OpenAPI](https://learning.getpostman.com/docs/postman/collections/working_with_openAPI/).\nOur API definition can be found [here](https://swagger.prioticket.com/definitions/Prio-Distributor-API/v32/distributor.json).\n\nDownload below a fully prepared example with environment variables:\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/2f2d6fd6445d67442542#?env%5BSandbox%20API%20V3.2%5D=W3sia2V5IjoiZGlzdHJpYnV0b3JJRCIsInZhbHVlIjoiNTAxIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJVc2VybmFtZSIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJQYXNzd29yZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJQcm9kdWN0SUQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiZW52aXJvbm1lbnQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoicHJvZHVjdF90eXBlX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6InByb2R1Y3RfYXZhaWxhYmlsaXR5X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6InJlc2VydmF0aW9uX3JlZmVyZW5jZSIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJvcmRlcl9yZWZlcmVuY2UiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9XQ==)\n  \n---\n## Formats\n\n  ### General Formats\n\n\n  + All data should be in the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) character set.\n\n\n  + Currency codes are sent in the [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) format.\n\n\n  + Language is defined in the [ISO-639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\n\n  + Amounts and values should follow the international standard. Rounding might be required.\n\n\n  + All data fields are case-sensitive.\n\n\n  + Optional parameters that are not set or left empty will not be returned in\n  the response. Please take care that you also consider some values to be nullable.\n\n  ---\n\n  ### Date / Time Formats\n\n  Points in time are expressed as strings using the [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) datetime format. We always expect the local time with its UTC offset.\n  \n  > For example, <br> Burj Khalifa entrance Ticket in Dubai for 12th of May 2016 at 14:00 (local time): <br><br>\n    Expected:<br>\n    `2016-05-12T14:00:00+04:00`<br>\n    Not expected:<br> \n    `2016-05-12T10:00:00+08:00` / `2016-05-12T18:00:00+00:00` <br><br>\n  > Note 1: Although the above examples express the same point in time, \n    we consider only the first one as valid because we always require the date and time in reference to the location of the activity. <br><br>\n  > Note 2: Although mentioned in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt), due to technical restrictions we do not support the Z suffix. Please send `+00:00` to denote a zero UTC offset instead.\n  \n---\n### Headers\n  \n  #### Authorization\n  \n  To allow secure data transmission between Suppliers and Distributors all API\n  requests require HTTPS.\n\n  The API Key Token information for the sandbox and production environment will be sent\n  in a separate mail.<br>\n\n  If the request lacks any authentication information (e.g., the client\n   was unaware that authentication is necessary or attempted using an\n   unsupported authentication method), the **resource server** should not\n   include an error code or other error information.\n\n  `Authorization: Bearer JWT Token`<br>\n  \n   ---\n\n  #### Idempotency\n  \n  The Prio API supports [idempotency](https://tools.ietf.org/html/rfc7231#section-4.2.2), allowing you to retry a request multiple times while only performing the action once. This helps avoid unwanted duplication in case of failures and retries. For example, in the case of a timeout error, it is possible to safely retry sending the same API Create Order call multiple times with the guarantee that the order will only be created once.\n\n  This API supports idempotency on POST requests (other request types such as GET, DELETE and PUT are idempotent by definition). \n  \n  ---\n\n  #### Content-Type\n\n  The `Content-Type` should be `application/json`.\n  \n  ---\n     \n## Product Configuration \n\n  ### Product types\n\n  All products require a `product_type` value. This parameter describes a\n  specific individual type.\n  \n  #### Values:\n      \n    + ADULT \n    + CHILD \n    + INFANT\n    + YOUTH\n    + SENIOR\n    \n    + PERSON (any age)\n    + MILITARY\n    + STUDENT\n    + IMPAIRED\n    + ITEM \n\n    + GROUP \n    \n    + CUSTOM\n    \n---\n    \n### Product admission types\n+ `TIME_PERIOD` - Customers can arrive at any time between the start (`availability_from_date_time`) and end time (`availability_to_date_time`) of the availability slot. Multiple periods in a single day should be expected.\n  Therefore a date- and timepicker should be shown.\n\n  Examples:\n\n  * An amusement park which has two opening periods, for example, a morning shift (09:00 - 12:00) and an afternoon shift (14:00 - 22:00).\n\n  * An afternoon admission to an amusement park that can be used from\n 1pm to 9pm.\n \n  ---\n \n+ `TIME_DATE` - Variation on `TIME_PERIOD`, whereas only a single period exists in a day. It is not required to choose between different times within a day, therefore only a datepicker is required.\n  Note that in case the slot includes midnight (two or more days), the day from which the `availability_from_date_time` originated should take precedence.\n\n  Examples:\n  \n  * A museum ticket that can be used during any time on the purchase date.\n  * A public transport ticket which is valid for the whole day.\n  \n  ---\n\n+ `TIME_POINT` - Customers are required to be present at the start time of the availability slot but can leave any time they want.\n\n  Examples:\n\n   * In the museum admission scenario, a timed entry ticket\n   for 10am requires the user to be at the museum at 10am. The start time of\n   availability slots for this service represents the designated entry\n   time. The end time, however, is used solely as a key to identify the\n   availability slot for booking.\n   \n   ---\n   \n+ `TIME_OPEN` - Customers can arrive at any time. Availablity is not applicable.\n\n  Examples:\n  \n  * A museum entry voucher which can be used anytime during the year.\n  \n  ---\n  \n+ `TIME_SLOT` - Customers are required to be present at the start time of the availability slot, and the service is expected to finish at the end time of the slot.\n    \n  Examples:\n\n    * A tour that starts at 9am that requires all attendees to arrive\n       at the start time, and returns at around 12pm.\n    * A haircut reservation at 3pm on Saturday that will take approximately\n     30 minutes.\n    * A fitness class from 6pm to 8pm.\n    \n---\n   \n### Pricing\n    \n  Different pricing configurations can be set depending on the product type (`product_type`), age group (`product_type_age`), booking quantity (`product_quantity_pricing`), season (`product_seasonal_pricing`), daily pricing (`product_daily_pricing`).\n  \n  All prices are given per `product_type`, per season (`product_seasonal_pricing:true`).\n  Every possible variation to this price is given as either a discount or surcharge.\n  The newly calculated price is returned in both the Reservation and Order API.\n  \n  TIP: To check whether you have implemented all logic correctly, it is advised that you cross-check the returned prices in the API with your own.\n  \n  ---\n  \n### Booking Restrictions\n#### Basics\n\n  Prio offers many different product configurations as well as restrictions on when a product can be purchased. Below a basic example on some of them.\n\n   ```   \n  OffsetDateTime currentDate = OffsetDateTime.now();\n  OffsetDateTime travelDate = OffsetDateTime.now().plusDays(10);\n\n  Integer bookingCount = 3;\n  // Allowed to make a booking\n  if(\n      product.getProductBookingStartDate().isBefore(currentDate)\n              && product.getProductBookingEndDate().isAfter(currentDate)\n              && product.getProductStartDate().isBefore(travelDate)\n              && product.getProductEndDate().isAfter(travelDate)\n              && travelDate.isAfter(currentDate.plusMinutes(product.getProductBookingCutoffTime()))\n              && product.getProductMinSize() >= bookingCount\n              && product.getProductMaxSize() <= bookingCount\n              && !product.isProductDisabled()\n  );\n   ```\n  \n--- \n  \n## Use Cases\n      \n  ### Search Journey\n  \n  Imagine a customer would like to see the 'Lion King' movie in one of the movie theaters in his vicinity.\n  \n  He chooses 'Cinema Inc' which has multiple locations across the city.\n  \n  1. The customer is able to view all movies across all locations [Product List API](#/Products/getProductList).\n  2. The customer is able to view all movies per location [Product List API](#/Products/getProductList).\n  3. The customer is able to view all locations per product [Product List API](#/Products/getProduct) `product_locations`.\n  \n  ---\n  \n  ### Translations\n  \n  This API supports multilingual content.\n  \n  All translatable fields can be found inside the `product_content` object.\n  \n  Normally the returned content would default to the `product_default_language`, which is commonly English. Would you wish to retrieve more languages, those supported for that specific product can be found inside `product_content_languages`.\n  \n  One of the language codes in the above array can then be sent within the original request in the URL as `&product_content_language={language_code}`.\n  \n  ---\n  \n  ### Pagination\n  \n  Please be aware that some datasets can be bigger than others. The size of your inventory varies depending on your catalogue setup.\n  Pagination is supported on endpoints for which potentially thousands of records can be expected. To retrieve the full dataset we recommend implementing the paging rules.\n  \n  This only applies to partners which process considerable volume.\n  \n  ---\n\n## Errors\n\nThe API will return the appropriate [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for every request and this could therefore be used to categorize most common types of errors (e.g 400/401/402/403/404/405/406/409/418/422/429/500/501/502/503/504 are supported).\n<br>Additionally, the `error`, `error_description` and `errors` field can be consulted for more detailed information on the problem.\nIn case of a HTTP 400 the request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  For most common issues a more detailed description will be shown, else `INVALID_REQUEST` will be returned.\n> Please note that in the future more specific error codes might be added, therefore resulting in newly possible HTTP codes. Consider all between 200 and 300 as successfull responses, and every 400+/500+ as errors.\n---\n## Using the interactive documentation\nThis is an interactive documentation which allows you to experience the API first hand without writing any code. To start calling Endpoints, first \"Authorize\" yourself by using the button below.  Fill in the default sandbox credentials or the credentials received by your Account Manager.\n\nDefault Sandbox Credentials: \n* API Key: *Currently the API Key is only enforced on the Production Environment.*\n* client_id: `demo-distributor@prioticket.com`\n* client_secret: `NpEZ&x4QBQV6#L&v`\n* distributor_id: `501`\n\nAfter the authorization is successful, all subsequent calls will automatically contain the Bearer token.\n\n---\n### OpenAPI Specification\n#### Read-Only and Write-Only Properties\nPlease note that some schemas are being reused multiple times, across endpoints but also between requests and responses. `readOnly` properties are included in responses but not in requests, and `writeOnly` properties may be sent in requests but not in responses.\nFurthermore because all response types are JSON, the order in which the parameters are sent is not relevant and for documentation purposes might change over time.\n\n  More info on this topic can be found in the [Open API Specification](https://swagger.io/docs/specification/data-models/data-types/)\n  \n#### Deprecation and upcoming changes\nDue to limitations on our interactive documentation we list current unavailable methods as deprecated. Note that these are not actually deprecated, instead they will be added in the future. You can safely ignore these parameters as they affect either new or obsolute functionality for services that do not apply nor are within the scope for your current integration.\n\nFurthermore, in case you are viewing the latest version available, continuous amendments to both the documentation and the API can be expected. This means we are constantly adding new functionalities and parameters to the same API version, as long as these are deemed non-breaking and backwards compatible. In case any breaking changes need to be made, a new version will be introduced. Please note that the syntax of upcoming (not yet released) functionalities might be subject to change.\n#### Libraries\nBecause our API definition is publicly available you can use several open-source tools to generate client libraries. Please note that these libraries are auto-generated and should be considered Alpha releases. Backwards compatibility is not guaranteed and as this is a third-party tool we can not offer any assistance.\n  In case you find using a SDK helpful we recommend to use the [Open API Generator](https://openapi-generator.tech/).\n\n---\n<b>PrioTicket Confidential</b>\n\n  This documentation is protected by law from any form of duplication unless prior permission is obtained from the officers of PrioTicket.\n\n---",
    "termsOfService" : "https://prioticket.com/terms",
    "contact" : {
      "name" : "API Support",
      "url" : "https://support.prioticket.com",
      "email" : "api-support@prioticket.com"
    },
    "version" : "3.2.0",
    "x-google-endpoints" : [ {
      "name" : "distributor-api.endpoints.prio-distributor-api.cloud.goog",
      "allowCors" : true
    } ]
  }
}
